{"version":3,"sources":["resources/logo.svg","resources/csv/RawSpawnData.csv","resources/csv/RawWaterSpawnData.csv","resources/csv/HeadbuttSpawnData.csv","store/actions/filter.ts","store/actions/settings.ts","store/selectors/filter.ts","store/selectors/settings.ts","store/actions/pagination.ts","store/reducers/pagination.ts","store/selectors/pagination.ts","store/model/spawn_data.ts","store/selectors/spawn_data.ts","providers/getEvolutionSynonyms.ts","providers/spawnDataParser.ts","store/actions/spawn_data.ts","components/SettingsModal.tsx","containers/Settings.tsx","store/selectors/quick_list.ts","components/QuickList.tsx","containers/QuickList.tsx","providers/getPokemonData.ts","helpers/index.tsx","components/Types.tsx","store/actions/quick_list.ts","components/TypeEffectivenessModal.tsx","providers/typeEffectivenessChart.ts","components/SpawnTable.tsx","containers/SpawnTable.tsx","components/SpawnDataTabs.tsx","containers/SpawnDataTabs.tsx","components/App.tsx","containers/App.tsx","serviceWorker.ts","store/reducers/settings.ts","store/reducers/quick_list.ts","store/reducers/filter.ts","store/reducers/spawn_data.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","FilterActionTypes","setFilterPokemon","pokemon","type","SET_FILTER_POKEMON","setFilterArea","area","SET_FILTER_AREA","SettingsActionTypes","getFilter","createSelector","state","filter","s","getSettings","settings","PaginationActionTypes","resetPage","RESET_PAGE","toggleSortByDirection","direction","sortByColumnsSorting","_sortArea","pokedexNumber","min","tier","morning","day","night","initialState","pagination","page","sortBy","sortByDirection","Rod","WaterSpawnLocation","SpawnType","getPaginationState","getCurrentPage","getFilteredSourceData","spawn_data","sourceData","filteredData","land","water","headbutt","evolution_synonyms","require","filterFunction","entry","filter_poke","filter_area","length","filter_area_regex","RegExp","replace","comparison_poke","find_pokemon_synonyms","hasOwnProperty","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","synonym","value","err","return","filterMatchSynonym","match","e","Object","keys","forEach","getSortedFilteredSourceData","sortedData","_","reverse","getFilteredSourceDataCount","getRepelTrickData","repelTrickData","SpawnDataActionTypes","spawnDataParser","classCallCheck","this","regionSorting","Kanto","Johto","Hoenn","Sinnoh","Unova","Kalos","Alola","createClass","key","_this","csv_files","Promise","resolve","all","map","file","papa_resolve","papa_reject","Papa","header","download","skipEmptyLines","complete","error","then","results","data","dataParser","spawnData","uniqueId","padStart","region","membershipExclusive","membership","membersAccessible","levels","heldItem","parseInt","max","repelId","setSpawnDataForType","SET_DATA_FOR_TYPE","payload","SettingsModal","props","possibleConstructorReturn","getPrototypeOf","call","settingsModalOpen","_this2","modalOpen","display_information","react_default","a","createElement","Fragment","Button","icon","floated","onClick","setState","Modal","size","open","onClose","Header","Content","Form","id","types","time_of_day","ms","repel","item","ev","catch_rate","label","index","Field","Checkbox","concat","toggle","checked","toggleDisplayInformation","Input","results_per_page","name","step","onChange","_ref","setResultsPerPage","Actions","color","React","Component","connect","dispatch","SET_RESULTS_PER_PAGE","TOGGLE_DISPLAY_INFORMATION_KEY","getQuickList","quick_list","QuickList","quickListData","Segment","List","horizontal","Item","className","getPokemonData","Helpers","console","Error","Types","toLowerCase","substr","QuickListActionTypes","TypeEffectivenessMatrixModal","TYPE_EFFECTIVENESS_CHART","type_effectiveness","attacking_type","effectiveness","defending_type","Types_Types","dimmer","Grid","Row","Column","pokemonName","columns","slice","toLocaleLowerCase","toLocaleUpperCase","values","getEffectivenessClassName","renderEffectiveness","SpawnTable","location","areaRepelData","prominent_group_count","Math","apply","toConsumableArray","prominent_group_max_level_index","indexOf","prominent_group_max_level","showColumns","column","find","spawnSourceData","getSourceTypeLabel","icon_rod","src","alt","paginationState","pageSize","currentPage","Table","compact","basic","sortable","unstackable","HeaderCell","sorted","setSortBy","textAlign","Body","renderTableRow","Footer","colSpan","numberOfColumnsForType","Pagination","defaultActivePage","totalPages","ceil","onPageChange","activePage","setPage","repelTrickPossible","pokemon_data","icon_morning","title","icon_day","icon_night","icons_rod","Old","Good","Super","Cell","href","target","rel","Icon","inQuickList","removeFromQuickList","aria-hidden","addToQuickList","TypeEffectivenessModal","rod","getTierClassName","renderEvYield","renderCatchRate","ev_yield","round","toLocaleString","numberOfResults","SET_PAGE","SET_SORT_BY","ADD_TO_LIST","REMOVE_FROM_LIST","SpawnDataTabs","active_index","tab_panes","menuItem","render","Tab","Pane","containers_SpawnTable","panes","defaultActiveIndex","onTabChange","paginationResetPage","App","pokemon_dropdown_values","defaultMemoize","text","Container","Settings","Dropdown","placeholder","search","selection","clearable","obj","options","link","toggleFindPokemonSynonyms","containers_SpawnDataTabs","containers_QuickList","getSourceData","SET_REPEL_TRICK_DATA","TOGGLE_FIND_POKEMON_SYNONYMS","Boolean","window","hostname","fromSettings","fromQuickList","fromFilter","fromSpawnData","fromPagination","reducer","combineReducers","arguments","action","objectSpread","newState","push","TOGGLE_SORT_BY_DIRECTION","persistConfig","storage","whitelist","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","es","integration_react","loading","logo","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ddda636.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/RawSpawnData.171ccada.csv\";","module.exports = __webpack_public_path__ + \"static/media/RawWaterSpawnData.c468b535.csv\";","module.exports = __webpack_public_path__ + \"static/media/HeadbuttSpawnData.b7919aef.csv\";","import {AnyAction} from \"redux\";\n\nexport enum FilterActionTypes {\n    SET_FILTER_POKEMON = 'SET_FILTER_POKEMON',\n    SET_FILTER_AREA = 'SET_FILTER_AREA',\n}\n\nexport interface SetFilterPokemonAction extends AnyAction {\n    type: FilterActionTypes.SET_FILTER_POKEMON\n    pokemon: string\n}\n\nexport interface SetFilterAreaAction extends AnyAction {\n    type: FilterActionTypes.SET_FILTER_AREA\n    area: string\n}\n\nexport function setFilterPokemon(pokemon: string): SetFilterPokemonAction {\n    return {type: FilterActionTypes.SET_FILTER_POKEMON, pokemon: pokemon}\n}\n\nexport function setFilterArea(area: string): SetFilterAreaAction {\n    return {type: FilterActionTypes.SET_FILTER_AREA, area: area}\n}\n\nexport type FilterAction = SetFilterPokemonAction | SetFilterAreaAction\n","import {AnyAction} from \"redux\";\n\nexport enum SettingsActionTypes {\n    TOGGLE_FIND_POKEMON_SYNONYMS = 'TOGGLE_FIND_POKEMON_SYNONYMS',\n    SET_RESULTS_PER_PAGE = 'SET_RESULTS_PER_PAGE',\n    TOGGLE_DISPLAY_INFORMATION_KEY = 'TOGGLE_DISPLAY_INFORMATION_KEY'\n}\n\nexport interface ToggleFindPokemonSynonymsAction extends AnyAction {\n    type: SettingsActionTypes.TOGGLE_FIND_POKEMON_SYNONYMS\n}\n\nexport interface SetResultsPerPageAction extends AnyAction {\n    type: SettingsActionTypes.SET_RESULTS_PER_PAGE\n    results_per_page: number\n}\n\nexport interface ToggleDisplayInformationKey extends AnyAction {\n    type: SettingsActionTypes.TOGGLE_DISPLAY_INFORMATION_KEY,\n    key: string\n}\n\nexport type SettingsAction = ToggleFindPokemonSynonymsAction | SetResultsPerPageAction | ToggleDisplayInformationKey;\n\nexport function toggleFindPokemonSynonyms(): ToggleFindPokemonSynonymsAction {\n    return {type: SettingsActionTypes.TOGGLE_FIND_POKEMON_SYNONYMS};\n}\n\nexport function setResultsPerPage(results_per_page: number): SetResultsPerPageAction {\n    return {type: SettingsActionTypes.SET_RESULTS_PER_PAGE, results_per_page: results_per_page};\n}\n\nexport function toggleDisplayInformation(key: string): ToggleDisplayInformationKey {\n    return {type: SettingsActionTypes.TOGGLE_DISPLAY_INFORMATION_KEY, key: key};\n}\n","import {createSelector} from \"reselect\";\nimport {ApplicationState} from \"../reducers\";\n\nconst getFilterState = ((state: ApplicationState) => state.filter);\n\nexport const getFilter = createSelector([getFilterState], s => s.filter);\n","import {ApplicationState} from \"../reducers\";\nimport {createSelector} from \"reselect\";\n\nconst getSettingsState = ((state: ApplicationState) => state.settings);\n\nexport const getSettings = createSelector([getSettingsState], s => s.settings);\n","import {AnyAction} from \"redux\";\nimport {SortByColumn, SortByDirection} from \"../reducers/pagination\";\n\nexport enum PaginationActionTypes {\n    SET_PAGE = 'SET_PAGE',\n    RESET_PAGE = 'RESET_PAGE',\n    SET_SORT_BY = 'SET_SORT_BY',\n    TOGGLE_SORT_BY_DIRECTION = 'TOGGLE_SORT_BY_DIRECTION'\n}\n\nexport interface SetPageAction extends AnyAction {\n    type: PaginationActionTypes.SET_PAGE\n    page: number\n}\n\nexport interface ResetPageAction extends AnyAction {\n    type: PaginationActionTypes.RESET_PAGE\n}\n\nexport interface SetSortByAction extends AnyAction {\n    type: PaginationActionTypes.SET_SORT_BY\n    sortBy: SortByColumn\n}\n\nexport interface ToggleSortByDirectionAction extends AnyAction {\n    type: PaginationActionTypes.TOGGLE_SORT_BY_DIRECTION\n    direction: SortByDirection\n}\n\nexport function setPage(page?: number | string): SetPageAction {\n    return {type: PaginationActionTypes.SET_PAGE, page: typeof page === 'number' ? page : 1}\n}\n\nexport function resetPage(): ResetPageAction {\n    return {type: PaginationActionTypes.RESET_PAGE}\n}\n\nexport function setSortBy(sortBy: SortByColumn): SetSortByAction {\n    return {type: PaginationActionTypes.SET_SORT_BY, sortBy: sortBy}\n}\n\nexport function toggleSortByDirection(direction: SortByDirection): ToggleSortByDirectionAction {\n    return {type: PaginationActionTypes.TOGGLE_SORT_BY_DIRECTION, direction: direction}\n}\n\nexport type PaginationAction = SetPageAction | ResetPageAction | SetSortByAction | ToggleSortByDirectionAction\n","import {PaginationAction, PaginationActionTypes} from \"../actions/pagination\";\n\nexport type SortByDirection = 'ascending' | 'descending' | undefined\n\nexport interface PaginationState {\n    pagination: {\n        page: number\n        sortBy: SortByColumn\n        sortByDirection: SortByDirection\n    }\n}\n\nconst toggleSortByDirection = (direction: SortByDirection) => direction === \"ascending\" ? 'descending' : 'ascending';\n\nexport const sortByColumnsSorting = {\n    _sortArea: ['_sortArea', 'pokedexNumber', 'tier', 'location'],\n    pokedexNumber: ['pokedexNumber', '_sortArea', 'location'],\n    pokemon: ['pokemon', '_sortArea', 'location'],\n    min: ['min', '_sortArea', 'location'],\n    tier: ['tier', '_sortArea', 'pokedexNumber', 'location'],\n    morning: ['morning', 'day', 'night', '_sortArea', 'pokedexNumber', 'location'],\n    day: ['day', 'morning', 'night', '_sortArea', 'pokedexNumber', 'location'],\n    night: ['night', 'morning', 'day', '_sortArea', 'pokedexNumber', 'location'],\n};\n\nexport type SortByColumn = '_sortArea' | 'pokedexNumber' | 'pokemon' | 'min' | 'tier' | 'morning' | 'day' | 'night';\n\nexport const initialState: PaginationState = {\n    // no need to store page for every type since we reset the page to 1 on every tab change\n    pagination: {\n        page: 1,\n        sortBy: '_sortArea',\n        sortByDirection: 'ascending'\n    }\n};\n\nexport function reducer(state: PaginationState = initialState, action: PaginationAction) {\n    let newState: PaginationState = {\n        pagination: {\n            ...state.pagination\n        }\n    };\n    switch (action.type) {\n        case PaginationActionTypes.RESET_PAGE:\n            newState.pagination.page = 1;\n            newState.pagination.sortBy = '_sortArea';\n            break;\n        case PaginationActionTypes.SET_PAGE:\n            newState.pagination.page = action.page;\n            break;\n        case PaginationActionTypes.SET_SORT_BY:\n            newState.pagination.sortBy = action.sortBy;\n            newState.pagination.sortByDirection = state.pagination.sortBy === action.sortBy ? toggleSortByDirection(state.pagination.sortByDirection) : \"ascending\";\n            break;\n        case PaginationActionTypes.TOGGLE_SORT_BY_DIRECTION:\n            newState.pagination.sortByDirection = toggleSortByDirection(state.pagination.sortByDirection);\n            break;\n        default:\n            return state;\n    }\n    return newState;\n}\n","import {ApplicationState} from \"../reducers\";\nimport {createSelector} from \"reselect\";\n\nexport const getPaginationState = ((state: ApplicationState) => state.pagination);\n\nexport const getCurrentPage = createSelector([getPaginationState], s => s.pagination.page);\n","export enum Rod {\n    Old = 'Old',\n    Good = 'Good',\n    Super = 'Super'\n}\n\nexport enum WaterSpawnLocation {\n    Surfing = 'Surfing',\n    Fishing = 'Fishing'\n}\n\nexport enum SpawnType {\n    land = 'land',\n    water = 'water',\n    headbutt = 'headbutt'\n}\n\nexport interface csv_common_spawn_data {\n    [key: string]: any\n\n    area: string\n    membersAccessible: string\n    region: string\n    pokemon: string\n    pokedexNumber: string\n    membership: string\n    heldItem: string\n    tier: string\n    levels: string\n}\n\nexport interface csv_time_based_spawn_data extends csv_common_spawn_data {\n    morning: boolean\n    day: boolean\n    night: boolean\n}\n\nexport interface csv_land_spawn_data extends csv_time_based_spawn_data {\n\n}\n\nexport interface csv_water_spawn_data extends csv_time_based_spawn_data {\n    rod?: string\n    location: string\n}\n\nexport interface csv_headbutt_spawn_data extends csv_common_spawn_data {\n\n}\n\nexport type CombinedCsvSpawnDataType = csv_land_spawn_data | csv_water_spawn_data | csv_headbutt_spawn_data\n\nexport interface common_spawn_data {\n    [key: string]: any\n    _sortArea: string\n    uniqueId: string\n    area: string\n    region: string\n    membershipExclusive: boolean\n    pokemon: string\n    pokedexNumber: string\n    heldItem: string\n    tier: string\n    levels: string\n    min: number\n    max: number\n}\n\nexport interface time_based_spawn_data extends common_spawn_data {\n    morning: boolean\n    day: boolean\n    night: boolean\n}\n\nexport interface land_spawn_data extends time_based_spawn_data {\n\n}\n\nexport interface water_spawn_data extends time_based_spawn_data {\n    rod: Rod\n    location: WaterSpawnLocation\n}\n\nexport interface headbutt_spawn_data extends common_spawn_data {\n\n}\n\nexport type CombinedSpawnDataType = land_spawn_data | water_spawn_data | headbutt_spawn_data;\n","import {ApplicationState} from \"../reducers\";\nimport {createSelector} from \"reselect\";\nimport {getFilter} from \"./filter\";\nimport {SpawnSourceData} from \"../../providers/spawnDataParser\";\nimport {CombinedSpawnDataType} from \"../model/spawn_data\";\nimport {getSettings} from \"./settings\";\nimport getEvolutionSynonyms from \"../../providers/getEvolutionSynonyms\";\nimport _ from \"lodash\";\nimport {sortByColumnsSorting} from \"../reducers/pagination\";\nimport {getPaginationState} from \"./pagination\";\n\nexport const getSpawnSourceData = ((state: ApplicationState) => state.spawn_data.sourceData);\n\nexport const getFilteredSourceData = createSelector([getSpawnSourceData, getFilter, getSettings], (sourceData, filter, settings) => {\n    const filteredData: SpawnSourceData = {\n        land: [],\n        water: [],\n        headbutt: []\n    };\n\n    const evolution_synonyms = getEvolutionSynonyms();\n\n    const filterMatchSynonym = (filter_poke: string, comparison_poke: string):boolean => {\n        if (settings.find_pokemon_synonyms && evolution_synonyms.hasOwnProperty(comparison_poke)) {\n            for (const synonym of evolution_synonyms[comparison_poke]) {\n                if (filter_poke.length > 0 && synonym === filter_poke) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    const filterFunction = (entry: CombinedSpawnDataType) => {\n        const filter_poke= filter.pokemon;\n        const filter_area = filter.area;\n\n        if (filter_poke.length > 0 || filter_area.length > 0) {\n            try {\n                const filter_area_regex = new RegExp(filter_area.replace('*', '.*'), 'i');\n                return (filter_poke.length > 0 && (filter_poke === entry.pokemon || filterMatchSynonym(filter_poke, entry.pokemon)))\n                    || (filter_area.length > 0 && entry._sortArea.match(filter_area_regex) !== null)\n            } catch (e) {\n                // do not throw for invalid regex\n                return entry.pokemon === filter_poke;\n            }\n        }\n        return true;\n    };\n\n    Object.keys(filteredData).forEach(type => {\n        filteredData[type] = sourceData[type].filter(filterFunction)\n    });\n\n    return filteredData;\n});\n\nexport const getSortedFilteredSourceData = createSelector([getFilteredSourceData, getPaginationState], (sourceData, pagination) => {\n    const sortedData: SpawnSourceData = {\n        land: [],\n        water: [],\n        headbutt: [],\n    };\n\n    Object.keys(sortedData).forEach(type => {\n        sortedData[type] = _.sortBy(sourceData[type], sortByColumnsSorting[pagination.pagination.sortBy]);\n        if (pagination.pagination.sortByDirection === \"descending\") {\n            sortedData[type] = sortedData[type].reverse();\n        }\n    });\n\n    return sortedData; // todo: sorting\n});\n\nexport const getFilteredSourceDataCount = createSelector([getFilteredSourceData], (sourceData) => {\n    return sourceData.land.length + sourceData.water.length + sourceData.headbutt.length\n});\n\nexport const getRepelTrickData = ((state: ApplicationState) => state.spawn_data.repelTrickData);\n","export interface EvolutionSynonym {\n    [key: string]: Array<string>\n}\n\nexport default function getEvolutionSynonyms(): EvolutionSynonym {\n    return require('../resources/json/evolution_synonyms.json');\n}\n","import * as Papa from \"papaparse\";\nimport {ParseResult} from \"papaparse\";\nimport _ from \"lodash\";\nimport {CombinedCsvSpawnDataType, CombinedSpawnDataType, SpawnType} from \"../store/model/spawn_data\";\n\ninterface SpawnDataPapaParseResult extends ParseResult {\n    data: Array<CombinedCsvSpawnDataType>\n}\n\ntype string_indexed_array = {\n    [key: string]: number\n}\n\nexport type RepelTrickDataEntry = {\n    [key: string]: number\n}\n\nexport type RepelTrickDataType = {\n    [key: string]: RepelTrickDataEntry\n}\n\nexport interface SpawnSourceData {\n    [key: string]: CombinedSpawnDataType[]\n    land: CombinedSpawnDataType[],\n    water: CombinedSpawnDataType[],\n    headbutt: CombinedSpawnDataType[]\n}\n\nexport interface SpawnDataParserResult {\n    sourceData: SpawnSourceData\n    repelTrickData: RepelTrickDataType\n}\n\nexport class spawnDataParser {\n\n    private regionSorting: string_indexed_array = {\n        Kanto: 1,\n        Johto: 2,\n        Hoenn: 3,\n        Sinnoh: 4,\n        Unova: 5,\n        Kalos: 6,\n        Alola: 7,\n    };\n\n    private repelTrickData: RepelTrickDataType = {};\n\n    public getSourceData() {\n        const csv_files = [\n            require('../resources/csv/RawSpawnData.csv'),\n            require('../resources/csv/RawWaterSpawnData.csv'),\n            require('../resources/csv/HeadbuttSpawnData.csv'),\n        ];\n\n        return new Promise((resolve: (result: SpawnDataParserResult) => void) => {\n            Promise.all(csv_files.map(file => new Promise<SpawnDataPapaParseResult>((papa_resolve, papa_reject) => {\n                Papa.parse(file, {\n                    header: true,\n                    download: true,\n                    skipEmptyLines: true,\n                    complete: papa_resolve,\n                    error: papa_reject\n                });\n            }))).then((results) => {\n\n                resolve({\n                    sourceData: {\n                        land: results[0].data.map((data) => this.dataParser(data, SpawnType.land)),\n                        water: results[1].data.map((data) => this.dataParser(data, SpawnType.water)),\n                        headbutt: results[2].data.map((data) => this.dataParser(data, SpawnType.headbutt)),\n                    },\n                    repelTrickData: this.repelTrickData\n                });\n\n            });\n        });\n\n    }\n\n    private dataParser(data: CombinedCsvSpawnDataType, type: SpawnType): CombinedSpawnDataType {\n\n        const spawnData:CombinedSpawnDataType = {\n            uniqueId :_.uniqueId(),\n            pokemon: data.pokemon,\n            pokedexNumber: data.pokedexNumber.padStart(3, '0'),\n            _sortArea: this.regionSorting[data.region] + ' - ' + data.region + ' - ' + data.area,\n            area: data.area,\n            region: data.region,\n            membershipExclusive: data.membership.length > 0 || data.membersAccessible.length > 0,\n            morning: !!data.morning,\n            day: !!data.day,\n            night: !!data.night,\n            levels: data.levels,\n            tier: data.tier,\n            heldItem: '',\n            min: parseInt(!!data.levels.match(/^(\\d+)-(\\d+)$/) ? data.levels.replace(/^(\\d+)-(\\d+)$/, '$1') : data.levels, 10),\n            max: parseInt(!!data.levels.match(/^(\\d+)-(\\d+)$/) ? data.levels.replace(/^(\\d+)-(\\d+)$/, '$2') : data.levels, 10),\n        };\n\n        let repelId = type + ' - ' + data.region + ' - ' + data.area;\n\n        // if (typeof data.heldItem === 'string' && data.heldItem.length) {\n        //     const regex = /(\\[\\[([^\\]|]+)(\\|[^\\]]+)?]])/g;\n        //     const tokens = data.heldItem.replace(regex, '###$1###').split('###');\n        //\n        //     const heldItem = [];\n        //     tokens.forEach((token, tokenIndex) => {\n        //         if (token.match(regex)) {\n        //             token.replace(regex, (...matches) => {\n        //                 heldItem.push(<a key={repelId + tokenIndex} href={`https://prowiki.info/index.php?title=Special:Search/${matches[2]}`} target=\"_blank\" rel=\"noopener noreferrer\">{matches[2]}</a>)\n        //             });\n        //         } else {\n        //             heldItem.push(token);\n        //         }\n        //     });\n        //     data.heldItem = heldItem;\n        // }\n\n        if (type !== SpawnType.headbutt) {\n            if (!this.repelTrickData.hasOwnProperty(repelId)) {\n                this.repelTrickData[repelId] = {};\n            }\n            if (!this.repelTrickData[repelId].hasOwnProperty(spawnData.max)) {\n                this.repelTrickData[repelId][spawnData.max] = 0;\n            }\n            this.repelTrickData[repelId][spawnData.max]++;\n        }\n\n        return spawnData;\n    }\n}\n","import {AnyAction} from \"redux\";\nimport {CombinedSpawnDataType, SpawnType} from \"../model/spawn_data\";\nimport {RepelTrickDataType} from \"../../providers/spawnDataParser\";\n\nexport enum SpawnDataActionTypes {\n    SET_DATA_FOR_TYPE = 'SET_DATA_FOR_TYPE',\n    SET_REPEL_TRICK_DATA = 'SET_REPEL_TRICK_DATA',\n}\n\nexport interface SetSpawnDataForTypeAction extends AnyAction {\n    type: SpawnDataActionTypes.SET_DATA_FOR_TYPE\n    payload: {\n        type: SpawnType\n        data: CombinedSpawnDataType[]\n    }\n}\n\nexport interface SetRepelTrickDataAction extends AnyAction {\n    type: SpawnDataActionTypes.SET_REPEL_TRICK_DATA\n    data: RepelTrickDataType\n}\n\nexport type SpawnDataAction = SetSpawnDataForTypeAction | SetRepelTrickDataAction;\n\nexport function setSpawnDataForType(type: SpawnType, data: CombinedSpawnDataType[]): SetSpawnDataForTypeAction {\n    return {\n        type: SpawnDataActionTypes.SET_DATA_FOR_TYPE,\n        payload: {\n            type: type,\n            data: data\n        }\n    }\n}\n\nexport function setRepelTrickData(data: RepelTrickDataType): SetRepelTrickDataAction {\n    return {\n        type: SpawnDataActionTypes.SET_REPEL_TRICK_DATA,\n        data: data\n    }\n}\n","import React from \"react\";\nimport {Button, Checkbox, Form, Modal} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {SettingsModel} from \"../store/model/settingsModel\";\n\ninterface SettingsModalProps {\n    settings: SettingsModel\n    setResultsPerPage: (results_per_page: number) => void\n    toggleDisplayInformation: (key: string) => void\n}\ninterface State {\n    settingsModalOpen: boolean\n}\n\nexport default class SettingsModal extends React.Component<SettingsModalProps, State> {\n\n    public constructor(props: SettingsModalProps) {\n        super(props);\n        this.state = {\n            settingsModalOpen: false\n        };\n    }\n\n    public render() {\n        const modalOpen = this.state.settingsModalOpen;\n        const settings = this.props.settings;\n        const display_information = settings.display_information;\n\n        let showColumnsLabels = {\n            \"id\": 'pokedex id',\n            \"types\": 'pokemon types',\n            \"time_of_day\": 'time of day',\n            \"tier\": 'tier',\n            \"ms\": 'membership',\n            \"levels\": 'levels',\n            \"repel\": 'repel trick',\n            \"item\": 'held item',\n            \"ev\": 'ev yield',\n            \"catch_rate\": 'catch rate',\n        };\n\n        return (\n            <React.Fragment>\n                <Button icon='cog' floated='right' onClick={() => this.setState({settingsModalOpen: true})}/>\n                <Modal size='mini' open={modalOpen} onClose={() => this.setState({settingsModalOpen: false})} >\n                    <Modal.Header>Settings</Modal.Header>\n                    <Modal.Content>\n                        <Form>\n                            {_.map(showColumnsLabels, (label, index) => (\n                                <Form.Field key={label + index}>\n                                    <Checkbox\n                                        label={`show ${label} column`}\n                                        toggle\n                                        checked={display_information[index]}\n                                        onClick={() => this.props.toggleDisplayInformation(index)}\n                                    />\n                                </Form.Field>\n                            ))}\n\n                            <Form.Field>\n                                <Form.Input\n                                    label={`results per page: ${settings.results_per_page}`}\n                                    min={10}\n                                    max={50}\n                                    name='resultsPerPage'\n                                    step={10}\n                                    type='range'\n                                    value={settings.results_per_page}\n                                    onChange={(e, {value}) => this.props.setResultsPerPage(parseInt(value, 10))}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='green' onClick={() => this.setState({settingsModalOpen: false})}>\n                            Close\n                        </Button>\n                    </Modal.Actions>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n","import React from 'react';\nimport {ApplicationState} from \"../store/reducers\";\nimport {getSettings} from \"../store/selectors/settings\";\nimport {setResultsPerPage, toggleDisplayInformation} from \"../store/actions/settings\";\nimport {connect} from \"react-redux\";\nimport SettingsModal from \"../components/SettingsModal\";\nimport {Action, Dispatch} from \"redux\";\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    settings: getSettings(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<any>>) => ({\n    setResultsPerPage: (results_per_page: number) => dispatch(setResultsPerPage(results_per_page)),\n    toggleDisplayInformation: (key: string) => dispatch(toggleDisplayInformation(key))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsModal)\n","import {ApplicationState} from \"../reducers\";\nimport {createSelector} from \"reselect\";\n\nconst getQuickListState = ((state: ApplicationState) => state.quick_list);\n\nexport const getQuickList = createSelector([getQuickListState], s => s.quick_list);\n","import React from \"react\";\nimport {Button, List, Segment} from \"semantic-ui-react\";\nimport {QuickListEntry} from \"../store/reducers/quick_list\";\n\ninterface QuickListProps {\n    quick_list: QuickListEntry[]\n    setFilterPokemon: (pokemon: string) => void\n}\ninterface QuickListState {\n}\n\nexport default class QuickList extends React.Component<QuickListProps, QuickListState> {\n    public render() {\n        const quickListData = this.props.quick_list;\n        return (\n            !quickListData ? null :\n                <Segment>\n                    <List horizontal >\n                        {quickListData.map((entry, index) => (\n                            <List.Item key={index}>\n                                <Button className='btn-lnk' onClick={() => this.props.setFilterPokemon(entry.name)}>\n                                    <i className={`pokedex-sprite pokedex-sprite-${entry.id}`}/>\n                                    {entry.name}\n                                </Button>\n                            </List.Item>))}\n                    </List>\n                </Segment>\n        );\n    }\n}\n","import {ApplicationState} from \"../store/reducers\";\nimport {connect} from \"react-redux\";\nimport {getQuickList} from \"../store/selectors/quick_list\";\nimport {setFilterPokemon} from \"../store/actions/filter\";\nimport QuickList from \"../components/QuickList\";\nimport {Action, Dispatch} from \"redux\";\nimport {resetPage} from \"../store/actions/pagination\";\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    quick_list: getQuickList(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<any>>) => ({\n    setFilterPokemon: (pokemon: string) => {dispatch(setFilterPokemon(pokemon)); dispatch(resetPage())},\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickList)\n","export type PokemonTypes = 'Normal' | 'Fire' | 'Water' | 'Electric' | 'Grass' | 'Ice' | 'Fighting' | 'Poison' | 'Ground' | 'Flying' | 'Psychic' | 'Bug' | 'Rock' | 'Ghost' | 'Dragon' | 'Dark' | 'Steel' | 'Fairy';\n\ninterface CommonPokemonData {\n    name: string\n    types: PokemonTypes[]\n    abilities: string[]\n    hidden_ability?: string\n    stats: number[]\n    catch_rate: number\n    ev_yield: number[]\n    male_ratio: number | string\n    height: number\n    weight: number\n    base_exp: number\n}\n\nexport interface PokemonData extends CommonPokemonData{\n    id: string\n    generation: number\n    species: string\n    forms: PokemonFormData[]\n}\n\nexport interface PokemonFormData extends CommonPokemonData{\n\n}\n\nexport default function getPokemonData(): Array<PokemonData>  {\n    return require('../resources/json/pokemon_data.json');\n};\n","import {CombinedSpawnDataType} from \"../store/model/spawn_data\";\n\nexport class Helpers {\n    public static getSourceTypeLabel(type: string) {\n        switch (type) {\n            case 'headbutt':\n                return 'Headbutting';\n            case 'water':\n                return 'Surfing and Fishing';\n            default:\n                return 'Walking';\n        }\n    }\n\n    public static getTierClassName(entry: CombinedSpawnDataType) {\n        const rarity = entry.tier;\n        switch (rarity) {\n            case \"1\":\n            case \"Common\":\n                return 'green';\n            case \"2\":\n            case \"3\":\n                return 'olive';\n            case \"4\":\n            case \"5\":\n            case \"Intermediate\":\n                return 'yellow';\n            case \"6\":\n            case \"7\":\n            case \"Rare\":\n                return 'orange';\n            case \"8\":\n            case \"9\":\n                return 'red';\n            default:\n                console.error(entry);\n                throw new Error('rarity not found');\n        }\n    }\n}\n","import React from \"react\";\n\ninterface TypesProps {\n    types: Array<String>\n}\n\nexport default class Types extends React.Component<TypesProps> {\n    public render() {\n        return (\n            <React.Fragment>\n                {this.props.types.map((type, index) =>\n                    <span key={index} className={'type-icon type-'+type.toLowerCase()}>{type.substr(0,3)}</span>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n","import {AnyAction} from \"redux\";\nimport {QuickListEntry} from \"../reducers/quick_list\";\nimport {CombinedSpawnDataType} from \"../model/spawn_data\";\n\nexport enum QuickListActionTypes {\n    ADD_TO_LIST = 'ADD_TO_LIST',\n    REMOVE_FROM_LIST = 'REMOVE_FROM_LIST'\n}\n\nexport interface AddToListAction extends AnyAction{\n    type: QuickListActionTypes.ADD_TO_LIST\n    entry: CombinedSpawnDataType\n}\n\nexport interface RemoveFromListAction extends AnyAction{\n    type: QuickListActionTypes.REMOVE_FROM_LIST\n    pokedexNumber: string\n}\n\nexport function addToQuickList(entry: CombinedSpawnDataType): AddToListAction {\n    return {\n        type: QuickListActionTypes.ADD_TO_LIST,\n        entry: entry\n    };\n}\n\nexport function removeFromQuickList(pokedexNumber: string): RemoveFromListAction {\n    return {\n        type: QuickListActionTypes.REMOVE_FROM_LIST,\n        pokedexNumber: pokedexNumber\n    }\n}\n\n\nexport type QuickListAction = AddToListAction | RemoveFromListAction;\n","import React from \"react\";\nimport {Button, Grid, Modal} from \"semantic-ui-react\";\nimport '../resources/css/TypeEffectivenessMatrixModal.css';\nimport Types from \"./Types\";\nimport {PokemonTypes} from \"../providers/getPokemonData\";\nimport {getTypeEffectivenessChart} from \"../providers/typeEffectivenessChart\";\n\ninterface TypeEffectivenessMatrixModalProps {\n    types: Array<PokemonTypes>\n    pokemonName: string\n}\n\ninterface TypeEffectivenessMatrixModalState {\n    settingsModalOpen: boolean\n}\n\nclass TypeEffectivenessMatrixModal extends React.Component<TypeEffectivenessMatrixModalProps, TypeEffectivenessMatrixModalState> {\n\n    public constructor(props: TypeEffectivenessMatrixModalProps) {\n        super(props);\n        this.state = {\n            settingsModalOpen: false,\n        };\n    }\n\n    private static getEffectivenessClassName(effectiveness: number) {\n        switch (effectiveness) {\n            case 0.25: return 'type-fx-025';\n            case 0.5: return 'type-fx-050';\n            default: return `type-fx-0${effectiveness}0`;\n        }\n    }\n\n    private static renderEffectiveness(effectiveness: number) {\n        switch (effectiveness) {\n            case 0.25: return '¼';\n            case 0.5: return '½';\n            // case 1: return '';\n            default: return effectiveness;\n        }\n    }\n\n    public render() {\n        const modalOpen = this.state.settingsModalOpen;\n\n        const TYPE_EFFECTIVENESS_CHART = getTypeEffectivenessChart();\n\n        const type_effectiveness: {[index: string]: number} = {};\n\n        Object.keys(TYPE_EFFECTIVENESS_CHART).forEach(attacking_type => {\n            let effectiveness = 1;\n            this.props.types.forEach(defending_type => {\n                effectiveness *= TYPE_EFFECTIVENESS_CHART[attacking_type][defending_type];\n            });\n            type_effectiveness[attacking_type] = effectiveness;\n        });\n\n        return (\n            <React.Fragment>\n                <Button onClick={() => this.setState({settingsModalOpen: true})} className='btn-lnk'>\n                    <Types types={this.props.types}/>\n                </Button>\n                <Modal size='mini' dimmer='inverted' open={modalOpen} onClose={() => this.setState({settingsModalOpen: false})} >\n                    <Modal.Content className='type_effectiveness_matrix'>\n                        <Grid>\n                            <Grid.Row>\n                                <Grid.Column>vs {this.props.pokemonName} <Types types={this.props.types}/></Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                        <Grid columns={9}>\n                            <Grid.Row>\n\n                                {Object.keys(type_effectiveness).slice(0,9).map(type => {\n                                    return (\n                                        <Grid.Column key={type} className={`type-icon type-${type.toLocaleLowerCase()}`}>\n                                            {type.substr(0,3).toLocaleUpperCase()}\n                                        </Grid.Column>\n                                    );\n                                })}\n\n                                {Object.values(type_effectiveness).slice(0,9).map((effectiveness, index) => {\n                                    return (\n                                        <Grid.Column key={index} className={TypeEffectivenessMatrixModal.getEffectivenessClassName(effectiveness)}>\n                                            {TypeEffectivenessMatrixModal.renderEffectiveness(effectiveness)}\n                                        </Grid.Column>\n                                    );\n                                })}\n\n                                {Object.keys(type_effectiveness).slice(9,18).map(type => {\n                                    return (\n                                        <Grid.Column key={type} className={`type-icon type-${type.toLocaleLowerCase()}`}>\n                                            {type.substr(0,3).toLocaleUpperCase()}\n                                        </Grid.Column>\n                                    );\n                                })}\n\n                                {Object.values(type_effectiveness).slice(9,18).map((effectiveness, index) => {\n                                    return (\n                                        <Grid.Column key={index} className={TypeEffectivenessMatrixModal.getEffectivenessClassName(effectiveness)}>\n                                            {TypeEffectivenessMatrixModal.renderEffectiveness(effectiveness)}\n                                        </Grid.Column>\n                                    );\n                                })}\n\n\n                            </Grid.Row>\n                        </Grid>\n                    </Modal.Content>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default TypeEffectivenessMatrixModal\n","interface TypeEffectivenessChartDefending {\n    [key: string]: number\n}\n\ninterface TypeEffectivenessChartAttacking {\n    [key: string]: TypeEffectivenessChartDefending\n}\n\nexport function getTypeEffectivenessChart(): TypeEffectivenessChartAttacking {\n    return require('../resources/json/type_effectiveness_chart.json');\n}\n","import React from \"react\";\nimport {Button, Icon, Pagination, Table} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {Helpers} from \"../helpers\";\nimport {FilterValues} from \"../store/reducers/filter\";\nimport {SettingsModel} from \"../store/model/settingsModel\";\nimport {RepelTrickDataType, SpawnSourceData} from \"../providers/spawnDataParser\";\nimport {CombinedSpawnDataType} from \"../store/model/spawn_data\";\nimport {PaginationState, SortByColumn} from \"../store/reducers/pagination\";\nimport {QuickListEntry} from \"../store/reducers/quick_list\";\nimport getPokemonData from \"../providers/getPokemonData\";\nimport TypeEffectivenessMatrixModal from \"./TypeEffectivenessModal\";\n\nexport interface SpawnTableProps {\n    filter: FilterValues\n    settings: SettingsModel\n    spawnSourceData: SpawnSourceData\n    numberOfResults: number\n    type: string\n    repelTrickData: RepelTrickDataType\n    currentPage: number\n    quick_list: QuickListEntry[]\n    paginationState: PaginationState\n    setFilterPokemon: (pokemon: any | string) => void\n    setFilterArea: (area: any | string) => void\n    setPage: (page?: number | string) => void\n    setSortBy: (sortBy: SortByColumn) => void\n    addToQuickList: (entry: CombinedSpawnDataType) => void\n    removeFromQuickList: (pokedexNumber: string) => void\n}\n\nexport default class SpawnTable extends React.Component<SpawnTableProps> {\n\n    private repelTrickPossible(type: string, entry: CombinedSpawnDataType) {\n        if (entry.hasOwnProperty('location') && entry.location === 'Fishing') return false;\n        let repelId = type + ' - ' + entry.region + ' - ' + entry.area;\n        if (!this.props.repelTrickData.hasOwnProperty(repelId)) return false;\n\n        const areaRepelData = this.props.repelTrickData[repelId];\n\n        const prominent_group_count = Math.max(...Object.values(areaRepelData));\n        const prominent_group_max_level_index = Object.values(areaRepelData).indexOf(prominent_group_count);\n        const prominent_group_max_level = Object.keys(areaRepelData)[prominent_group_max_level_index];\n\n        return entry.min > parseInt(prominent_group_max_level, 10);\n    }\n\n    private numberOfColumnsForType(type: string) {\n        const showColumns = this.props.settings.display_information;\n        let columns = 2;\n\n        switch (type) {\n            case 'water':\n                columns++; // rod\n            /* eslint-disable-next-line no-fallthrough */\n            case 'land':\n                columns += showColumns.time_of_day ? 3 : 0;\n                columns += showColumns.repel ? 1 : 0;\n            /* eslint-disable-next-line no-fallthrough */\n            default:\n                [\n                    \"id\",\n                    \"tier\",\n                    \"ms\",\n                    \"levels\",\n                    \"item\",\n                    \"ev\",\n                    \"catch_rate\",\n                ].forEach(column => {\n                    columns += showColumns[column] ? 1 : 0;\n                });\n        }\n\n        return columns;\n    }\n\n    private inQuickList(entry: CombinedSpawnDataType): boolean {\n        return _.find(this.props.quick_list, {id: entry.pokedexNumber}) !== undefined\n    }\n\n    private static renderEvYield(entry: CombinedSpawnDataType) {\n        const pokemon_data = _.find(getPokemonData(), {id: entry.pokedexNumber});\n        if (pokemon_data === undefined) return null;\n        return _.filter(pokemon_data.ev_yield).map((value, index) => {\n            if (value === 0) return null;\n            switch (index) {\n                case 0: return <small key={index} className='ev_yield_hp'><strong>{value}</strong>hp</small>;\n                case 1: return <small key={index} className='ev_yield_atk'><strong>{value}</strong>atk</small>;\n                case 2: return <small key={index} className='ev_yield_def'><strong>{value}</strong>def</small>;\n                case 3: return <small key={index} className='ev_yield_sp_atk'><strong>{value}</strong>sp.atk</small>;\n                case 4: return <small key={index} className='ev_yield_sp_def'><strong>{value}</strong>sp.def</small>;\n                case 5: return <small key={index} className='ev_yield_spd'><strong>{value}</strong>spd</small>;\n                default: return null;\n            }\n        });\n    }\n\n    private static renderCatchRate(entry: CombinedSpawnDataType) {\n        const pokemon_data = _.find(getPokemonData(), {id: entry.pokedexNumber});\n        if (pokemon_data === undefined) return null;\n        let catch_rate = pokemon_data.catch_rate * 100 / 255 * (1 / 3);\n        catch_rate = Math.round(catch_rate * 10) / 10; // round to .1\n        return catch_rate.toLocaleString() + '%';\n    }\n\n    public render() {\n        const type = this.props.type;\n        const data = this.props.spawnSourceData[type];\n\n        if (data.length === 0) {\n            return <React.Fragment>No results for {Helpers.getSourceTypeLabel(type)}</React.Fragment>\n        }\n\n        const icon_rod = <img src=\"https://img.pokemondb.net/sprites/items/fishing-rod.png\" alt=\"Fishing Rod\"/>;\n\n        const column = this.props.paginationState.pagination.sortBy;\n        const direction = this.props.paginationState.pagination.sortByDirection;\n\n        const showColumns = this.props.settings.display_information;\n\n        const pageSize = this.props.settings.results_per_page;\n        const currentPage = this.props.currentPage;\n\n        return (\n            <Table key={type} compact='very' basic className={type} sortable unstackable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell className='header-area' sorted={column === '_sortArea' ? direction : undefined} onClick={() => this.props.setSortBy('_sortArea')}>\n                            Region - Area\n                        </Table.HeaderCell>\n                        {showColumns.id && (\n                            <Table.HeaderCell textAlign='right' className='header-id' sorted={column === 'pokedexNumber' ? direction : undefined} onClick={() => this.props.setSortBy('pokedexNumber')}>ID</Table.HeaderCell>\n                        )}\n                        <Table.HeaderCell sorted={column === 'pokemon' ? direction : undefined} onClick={() => this.props.setSortBy('pokemon')}>Pokemon</Table.HeaderCell>\n                        {showColumns.time_of_day && type !== 'headbutt' && (\n                            <React.Fragment>\n                                <Table.HeaderCell className='header-morning' sorted={column === 'morning' ? direction : undefined} onClick={() => this.props.setSortBy('morning')}>M</Table.HeaderCell>\n                                <Table.HeaderCell className='header-day' sorted={column === 'day' ? direction : undefined} onClick={() => this.props.setSortBy('day')}>D</Table.HeaderCell>\n                                <Table.HeaderCell className='header-night' sorted={column === 'night' ? direction : undefined} onClick={() => this.props.setSortBy('night')}>N</Table.HeaderCell>\n                            </React.Fragment>\n                        )}\n                        {type === 'water' && <Table.HeaderCell className='header-rod'>{icon_rod}</Table.HeaderCell>}\n                        {showColumns.tier && <Table.HeaderCell className='header-tier' sorted={column === 'tier' ? direction : undefined} onClick={() => this.props.setSortBy('tier')}>\n                            Tier\n                        </Table.HeaderCell>}\n                        {showColumns.ms && <Table.HeaderCell className='header-ms'>MS?</Table.HeaderCell>}\n                        {showColumns.levels && <Table.HeaderCell className='header-levels' textAlign='right' sorted={column === 'min' ? direction : undefined} onClick={() => this.props.setSortBy('min')}>\n                            Levels\n                        </Table.HeaderCell>}\n                        {type !== 'headbutt' && showColumns.repel && <Table.HeaderCell className='header-repel'>Repel</Table.HeaderCell>}\n                        {showColumns.item && <Table.HeaderCell className='header-item'>Item</Table.HeaderCell>}\n                        {showColumns.ev && <Table.HeaderCell className='header-ev' textAlign='right'>EVs</Table.HeaderCell>}\n                        {showColumns.catch_rate && <Table.HeaderCell className='header-catch-rate'>Catch%</Table.HeaderCell>}\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {data\n                        .slice((currentPage-1)*pageSize, currentPage*pageSize)\n                        .map(entry => this.renderTableRow(entry, type))}\n                </Table.Body>\n                {data.length > pageSize &&\n                <Table.Footer>\n                    <Table.Row>\n                        <Table.HeaderCell colSpan={this.numberOfColumnsForType(type)}>\n                            <Pagination\n                                defaultActivePage={this.props.currentPage}\n                                totalPages={Math.ceil(data.length / pageSize)}\n                                onPageChange={(e, {activePage}) => {\n                                    this.props.setPage(activePage);\n                                }}\n                            />\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Footer>}\n            </Table>\n        );\n    }\n\n    private renderTableRow(entry: CombinedSpawnDataType, type: string) {\n        const showColumns = this.props.settings.display_information;\n        const repelTrickPossible = this.repelTrickPossible(type, entry);\n\n        const pokemon_data = _.find(getPokemonData(), {id: entry.pokedexNumber});\n\n        const icon_morning = <img src=\"https://img.pokemondb.net/images/locations/morning.png\" alt=\"Morning\" title=\"Morning\"/>;\n        const icon_day = <img src=\"https://img.pokemondb.net/images/locations/day.png\" alt=\"Day\" title=\"Day\"/>;\n        const icon_night = <img src=\"https://img.pokemondb.net/images/locations/night.png\" alt=\"Night\" title=\"Night\"/>;\n\n        const icons_rod: {[index: string]: any} = {\n            Old: <img src=\"https://img.pokemondb.net/sprites/items/old-rod.png\" alt=\"Old Rod\" title=\"Old Rod\"/>,\n            Good: <img src=\"https://img.pokemondb.net/sprites/items/good-rod.png\" alt=\"Good Rod\" title=\"Good Rod\"/>,\n            Super: <img src=\"https://img.pokemondb.net/sprites/items/super-rod.png\" alt=\"Super Rod\" title=\"Super Rod\"/>,\n        };\n\n        return (\n            <Table.Row key={entry.uniqueId}>\n                <Table.Cell>\n                    <small>{entry.region} - </small>\n                    <Button className='btn-lnk' onClick={() => this.props.setFilterArea(entry.area + '$')}>\n                        {entry.area}\n                    </Button>\n                </Table.Cell>\n                {showColumns.id && <Table.Cell textAlign='right'><small>{entry.pokedexNumber}</small></Table.Cell>}\n                <Table.Cell>\n                    <i className={`pokedex-sprite pokedex-sprite-${entry.pokedexNumber}`}/>\n                    <Button className='btn-lnk' onClick={() => this.props.setFilterPokemon(entry.pokemon)}>{entry.pokemon}</Button>\n                    &nbsp;\n                    <a href={`https://pokemondb.net/pokedex/${entry.pokedexNumber}`} target='_blank' rel=\"noopener noreferrer\">\n                        <Icon name='external alternate'/>\n                    </a>\n                    &nbsp;\n                    {this.inQuickList(entry)\n                        ? (\n                            <Button className='btn-lnk' onClick={() => this.props.removeFromQuickList(entry.pokedexNumber)}>\n                                <i aria-hidden=\"true\" className=\"bookmark green icon\"/>\n                            </Button>\n                        ) : (\n                            <Button className='btn-lnk' onClick={() => this.props.addToQuickList(entry)}>\n                                <i aria-hidden=\"true\" className=\"bookmark outline grey icon\"/>\n                            </Button>\n                        )\n                    }\n                    {showColumns.types && pokemon_data && <TypeEffectivenessMatrixModal types={pokemon_data.types} pokemonName={entry.pokemon}/>}\n                </Table.Cell>\n                {type !== 'headbutt' && showColumns.time_of_day && (\n                    <React.Fragment>\n                        <Table.Cell textAlign='center' className={'row-morning ' + (entry.morning ? 'yellow' : '')}>{entry.morning ? icon_morning : null}</Table.Cell>\n                        <Table.Cell textAlign='center' className={'row-day ' + (entry.day ? 'blue' : '')}>{entry.day ? icon_day : null}</Table.Cell>\n                        <Table.Cell textAlign='center' className={'row-night ' + (entry.night ? 'grey' : '')}>{entry.night ? icon_night : null}</Table.Cell>\n                    </React.Fragment>\n                )}\n                {type === 'water'\n                    ? <Table.Cell className='row-rod'>{entry.rod ? icons_rod[entry.rod] : null}</Table.Cell>\n                    : null}\n                {showColumns.tier && <Table.Cell className={'row-tier ' + Helpers.getTierClassName(entry)} textAlign='center'>{entry.tier}</Table.Cell>}\n                {showColumns.ms && (\n                    <Table.Cell textAlign='center' className={entry.membership ? 'violet' : ''}>\n                        {entry.membership ?\n                            <i className='ui icon dollar sign white'/> : null}\n                    </Table.Cell>\n                )}\n                {showColumns.levels && <Table.Cell textAlign='right'>{entry.levels}</Table.Cell>}\n                {type !== 'headbutt' && showColumns.repel && (\n                    <Table.Cell textAlign='center' className={repelTrickPossible ? 'teal' : ''}>{repelTrickPossible ? 'Yes' : null}</Table.Cell>\n                )}\n                {showColumns.item && <Table.Cell>{entry.heldItem}</Table.Cell>}\n                {showColumns.ev && <Table.Cell className='ev_yield' textAlign='right'>{SpawnTable.renderEvYield(entry)}</Table.Cell>}\n                {showColumns.catch_rate && <Table.Cell className='catch_rate' textAlign='right'>{SpawnTable.renderCatchRate(entry)}</Table.Cell>}\n            </Table.Row>\n        );\n    }\n}\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {ApplicationState} from \"../store/reducers\";\nimport {getSettings} from \"../store/selectors/settings\";\nimport {getFilter} from \"../store/selectors/filter\";\nimport {getFilteredSourceDataCount, getRepelTrickData, getSortedFilteredSourceData} from \"../store/selectors/spawn_data\";\nimport {Action, Dispatch} from \"redux\";\nimport {setFilterArea, setFilterPokemon} from \"../store/actions/filter\";\nimport {getCurrentPage, getPaginationState} from \"../store/selectors/pagination\";\nimport {resetPage, setPage, setSortBy} from \"../store/actions/pagination\";\nimport SpawnTable from '../components/SpawnTable';\nimport {getQuickList} from \"../store/selectors/quick_list\";\nimport {addToQuickList, removeFromQuickList} from \"../store/actions/quick_list\";\nimport {CombinedSpawnDataType} from \"../store/model/spawn_data\";\nimport {SortByColumn} from \"../store/reducers/pagination\";\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    settings: getSettings(state),\n    filter: getFilter(state),\n    spawnSourceData: getSortedFilteredSourceData(state),\n    numberOfResults: getFilteredSourceDataCount(state),\n    repelTrickData: getRepelTrickData(state),\n    currentPage: getCurrentPage(state),\n    paginationState: getPaginationState(state),\n    quick_list: getQuickList(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<any>>) => ({\n    setFilterPokemon: (pokemon: string) => {dispatch(setFilterPokemon(pokemon)); dispatch(resetPage())},\n    setFilterArea: (area: string) => {dispatch(setFilterArea(area)); dispatch(resetPage())},\n    setPage: (page?: number | string) => dispatch(setPage(page)),\n    setSortBy: (sortBy: SortByColumn) => dispatch(setSortBy(sortBy)),\n    addToQuickList: (entry: CombinedSpawnDataType) => dispatch(addToQuickList(entry)),\n    removeFromQuickList: (pokedexNumber: string) => dispatch(removeFromQuickList(pokedexNumber)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpawnTable);\n","import React from \"react\";\nimport {SpawnSourceData} from \"../providers/spawnDataParser\";\nimport {Tab} from \"semantic-ui-react\";\nimport SpawnTable from \"../containers/SpawnTable\";\nimport {Helpers} from \"../helpers\";\n\nexport interface SpawnDataTabsProps {\n    spawnSourceData: SpawnSourceData\n    numberOfResults: number\n    paginationResetPage: () => void\n}\n\nexport interface SpawnDataTabsState {\n\n}\n\nclass SpawnDataTabs extends React.Component<SpawnDataTabsProps, SpawnDataTabsState> {\n\n    public render() {\n        if (this.props.numberOfResults === 0) return <React.Fragment>No results for current filters</React.Fragment>;\n\n        let active_index = 0;\n\n        const tab_panes = ['land', 'water', 'headbutt'].map((type, index) => {\n            const data = this.props.spawnSourceData[type];\n            if (data.length === 0 && active_index === index) active_index++;\n            return {\n                menuItem: Helpers.getSourceTypeLabel(type) + ` (${data.length})`,\n                render: () => (\n                    <Tab.Pane>\n                        <SpawnTable type={type}/>\n                    </Tab.Pane>\n                )\n            }\n        });\n\n        return <Tab panes={tab_panes} defaultActiveIndex={active_index} onTabChange={this.props.paginationResetPage}/>;\n\n    }\n}\n\nexport default SpawnDataTabs;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {ApplicationState} from \"../store/reducers\";\nimport {getFilteredSourceDataCount, getSortedFilteredSourceData} from \"../store/selectors/spawn_data\";\nimport {Action, Dispatch} from \"redux\";\nimport {resetPage} from \"../store/actions/pagination\";\nimport SpawnDataTabs from \"../components/SpawnDataTabs\";\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    spawnSourceData: getSortedFilteredSourceData(state),\n    numberOfResults: getFilteredSourceDataCount(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<any>>) => ({\n    paginationResetPage: () => dispatch(resetPage()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpawnDataTabs)\n","import React from 'react';\nimport Settings from \"../containers/Settings\";\nimport QuickList from \"../containers/QuickList\";\nimport '../resources/css/App.css';\nimport '../resources/css/pokdex_sprites.css';\nimport '../resources/css/TypeEffectivenessMatrixModal.css';\nimport {Checkbox, Container, Dropdown, DropdownItemProps, Form, Input, Segment} from \"semantic-ui-react\";\nimport {FilterValues} from \"../store/reducers/filter\";\nimport {defaultMemoize} from \"reselect\";\nimport getPokemonData from \"../providers/getPokemonData\";\nimport {SettingsModel} from \"../store/model/settingsModel\";\nimport SpawnDataTabs from \"../containers/SpawnDataTabs\";\n\ninterface AppProps {\n    filter: FilterValues,\n    settings: SettingsModel,\n    toggleFindPokemonSynonyms: () => void\n    setFilterPokemon: (pokemon: any | string) => void\n    setFilterArea: (area: any | string) => void\n    numberOfResults: number\n}\ninterface AppState {\n\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    public render() {\n        const pokemon_dropdown_values = defaultMemoize(() => getPokemonData().map((entry): DropdownItemProps => {\n            return {key: entry.name, value: entry.name, text: entry.id + ': ' + entry.name}\n        }))();\n\n        return (\n            <Container>\n                <Segment>\n                    <Settings/>\n\n                    <Dropdown\n                        placeholder='pokemon name...'\n                        search\n                        selection\n                        clearable\n                        value={this.props.filter.pokemon}\n                        onChange={(e, obj) => this.props.setFilterPokemon(obj.value)}\n                        options={pokemon_dropdown_values}\n                    />\n\n                    &nbsp;\n                    &nbsp;\n\n                    <Input\n                        value={this.props.filter.area}\n                        onChange={(e: any) => this.props.setFilterArea(e.target.value)}\n                        icon={{name: 'close', link: true, onClick: () => this.props.setFilterArea('')}}\n                        placeholder='region/area (regex)...'\n                    />\n\n                    &nbsp;\n                    &nbsp;\n                    &nbsp;\n\n                    <strong>{this.props.numberOfResults} results</strong>\n\n                    <Form.Field>\n                        <Checkbox label='Include evolutions' checked={this.props.settings.find_pokemon_synonyms}\n                                  onClick={() => this.props.toggleFindPokemonSynonyms()}/>\n                    </Form.Field>\n                </Segment>\n\n                <SpawnDataTabs/>\n\n                <QuickList/>\n            </Container>\n        );\n    }\n}\n\nexport default App\n","import React from 'react';\nimport '../resources/css/App.css';\nimport '../resources/css/pokdex_sprites.css';\nimport '../resources/css/TypeEffectivenessMatrixModal.css';\nimport {ApplicationState} from \"../store/reducers\";\nimport {setFilterArea, setFilterPokemon} from \"../store/actions/filter\";\nimport {connect} from \"react-redux\";\nimport {getFilter} from \"../store/selectors/filter\";\nimport {Action, Dispatch} from \"redux\";\nimport {getSettings} from \"../store/selectors/settings\";\nimport {toggleFindPokemonSynonyms} from \"../store/actions/settings\";\nimport {getFilteredSourceDataCount} from \"../store/selectors/spawn_data\";\nimport {spawnDataParser} from \"../providers/spawnDataParser\";\nimport {SpawnType} from \"../store/model/spawn_data\";\nimport {setRepelTrickData, setSpawnDataForType} from \"../store/actions/spawn_data\";\nimport App from \"../components/App\";\nimport {resetPage} from \"../store/actions/pagination\";\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    settings: getSettings(state),\n    filter: getFilter(state),\n    numberOfResults: getFilteredSourceDataCount(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<any>>) => {\n    const dataParser = new spawnDataParser();\n\n    dataParser.getSourceData().then(results => {\n        const {sourceData, repelTrickData} = results;\n\n        dispatch(setSpawnDataForType(SpawnType.land, sourceData.land));\n        dispatch(setSpawnDataForType(SpawnType.water, sourceData.water));\n        dispatch(setSpawnDataForType(SpawnType.headbutt, sourceData.headbutt));\n        dispatch(setRepelTrickData(repelTrickData));\n    });\n\n    return {\n        toggleFindPokemonSynonyms: () => dispatch(toggleFindPokemonSynonyms()),\n        setFilterPokemon: (pokemon: string) => {dispatch(setFilterPokemon(pokemon)); dispatch(resetPage())},\n        setFilterArea: (area: string) => {dispatch(setFilterArea(area)); dispatch(resetPage())},\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Define our State interface for the current reducer\nimport {SettingsModel} from \"../model/settingsModel\";\nimport {SettingsAction, SettingsActionTypes} from \"../actions/settings\";\n\nexport interface SettingsState {\n    settings: SettingsModel\n}\n\n// Define our initialState\nexport const initialState: SettingsState = {\n    settings: {\n        find_pokemon_synonyms: true,\n        results_per_page: 20,\n        display_information: {\n            id: true,\n            types: true,\n            time_of_day: true,\n            tier: true,\n            ms: true,\n            levels: true,\n            repel: true,\n            item: true,\n            ev: true,\n            catch_rate: true,\n        }\n    }\n};\n\nexport function reducer(state: SettingsState = initialState, action: SettingsAction) {\n    switch (action.type) {\n        case SettingsActionTypes.TOGGLE_FIND_POKEMON_SYNONYMS:\n            return {\n                ...state,\n                settings: {\n                    ...state.settings,\n                    find_pokemon_synonyms: !state.settings.find_pokemon_synonyms\n                }\n            };\n        case SettingsActionTypes.SET_RESULTS_PER_PAGE:\n            return {\n                ...state,\n                settings: {\n                    ...state.settings,\n                    results_per_page: action.results_per_page\n                }\n            };\n        case SettingsActionTypes.TOGGLE_DISPLAY_INFORMATION_KEY:\n            const display_information = state.settings.display_information;\n            display_information[action.key] = !display_information[action.key];\n            return {\n                ...state,\n                settings: {\n                    ...state.settings,\n                    display_information: display_information\n                }\n            };\n        default:\n            return state\n    }\n}\n","import {QuickListAction, QuickListActionTypes} from \"../actions/quick_list\";\nimport _ from \"lodash\";\n\nexport type QuickListEntry = {\n    id: string\n    name: string\n}\n\nexport interface QuickListState {\n    quick_list: QuickListEntry[]\n}\n\nexport const initialState: QuickListState = {\n    quick_list: [\n        {\n            id: \"133\",\n            name: \"Eevee\"\n        },\n        {\n            id: \"147\",\n            name: \"Dratini\"\n        },\n        {\n            id: \"175\",\n            name: \"Togepi\"\n        },\n        {\n            id: \"246\",\n            name: \"Larvitar\"\n        },\n        {\n            id: \"280\",\n            name: \"Ralts\"\n        },\n        {\n            id: \"371\",\n            name: \"Bagon\"\n        },\n        {\n            id: \"443\",\n            name: \"Gible\"\n        },\n        {\n            id: \"446\",\n            name: \"Munchlax\"\n        },\n        {\n            id: \"532\",\n            name: \"Timburr\"\n        }\n    ]\n};\n\nexport function reducer(state: QuickListState = initialState, action: QuickListAction) {\n    let newState: QuickListState = {\n        quick_list: [\n            ...state.quick_list\n        ]\n    };\n    switch (action.type) {\n        case QuickListActionTypes.ADD_TO_LIST:\n            if (_.find(state.quick_list, {id: action.entry.id}) === undefined) {\n                newState.quick_list.push({id: action.entry.pokedexNumber, name: action.entry.pokemon});\n            }\n            break;\n        case QuickListActionTypes.REMOVE_FROM_LIST:\n            newState.quick_list = state.quick_list.filter((item: QuickListEntry) => item.id !== action.pokedexNumber);\n            break;\n        default:\n            return state;\n    }\n    return newState;\n}\n","import {FilterAction, FilterActionTypes} from \"../actions/filter\";\n\nexport interface FilterValues {\n    pokemon: string\n    area: string\n}\n\nexport interface FilterState {\n    filter: {\n        pokemon: string\n        area: string\n    }\n}\n\nexport const initialState: FilterState = {\n    filter: {\n        pokemon: '',\n        area: ''\n    }\n};\n\nexport function reducer(state: FilterState = initialState, action: FilterAction) {\n    switch (action.type) {\n        case FilterActionTypes.SET_FILTER_POKEMON:\n            return {\n                ...state,\n                filter: {\n                    pokemon: action.pokemon,\n                    area: ''\n                }\n            };\n        case FilterActionTypes.SET_FILTER_AREA:\n            return {\n                ...state,\n                filter: {\n                    pokemon: '',\n                    area: action.area\n                }\n            };\n        default:\n            return state;\n    }\n}\n","import {RepelTrickDataType, SpawnSourceData} from \"../../providers/spawnDataParser\";\nimport {SpawnType} from \"../model/spawn_data\";\nimport {SpawnDataAction, SpawnDataActionTypes} from \"../actions/spawn_data\";\n\nexport interface SpawnDataState {\n    sourceData: SpawnSourceData\n    repelTrickData: RepelTrickDataType\n}\n\nexport const initialState: SpawnDataState = {\n    sourceData: {\n        land: [],\n        water: [],\n        headbutt: []\n    },\n    repelTrickData: {}\n};\n\nexport function reducer(state: SpawnDataState = initialState, action: SpawnDataAction) {\n    switch (action.type) {\n        case SpawnDataActionTypes.SET_DATA_FOR_TYPE:\n            return {\n                ...state,\n                sourceData: {\n                    land: action.payload.type === SpawnType.land ? action.payload.data : state.sourceData.land,\n                    water: action.payload.type === SpawnType.water ? action.payload.data : state.sourceData.water,\n                    headbutt: action.payload.type === SpawnType.headbutt ? action.payload.data : state.sourceData.headbutt,\n                }\n            };\n        case SpawnDataActionTypes.SET_REPEL_TRICK_DATA:\n            return {\n                ...state,\n                repelTrickData: action.data\n            };\n        default: return state;\n    }\n}\n","import {combineReducers} from 'redux'\nimport * as fromSettings from './settings'\nimport * as fromQuickList from './quick_list'\nimport * as fromFilter from './filter'\nimport * as fromSpawnData from './spawn_data'\nimport * as fromPagination from './pagination'\n\n/*\n * This is the root state of the app\n * It contains every substate of the app\n */\nexport interface ApplicationState {\n    settings: fromSettings.SettingsState,\n    quick_list: fromQuickList.QuickListState,\n    filter: fromFilter.FilterState,\n    spawn_data: fromSpawnData.SpawnDataState,\n    pagination: fromPagination.PaginationState,\n}\n\n/*\n * initialState of the app\n */\nexport const initialState: ApplicationState = {\n    settings: fromSettings.initialState,\n    quick_list: fromQuickList.initialState,\n    filter: fromFilter.initialState,\n    spawn_data: fromSpawnData.initialState,\n    pagination: fromPagination.initialState,\n};\n\n/*\n * Root reducer of the app\n * Returned reducer will be of type Reducer<State>\n */\nexport const reducer = combineReducers<ApplicationState>({\n    settings: fromSettings.reducer,\n    quick_list: fromQuickList.reducer,\n    filter: fromFilter.reducer,\n    spawn_data: fromSpawnData.reducer,\n    pagination: fromPagination.reducer,\n});\n","import logger from 'redux-logger';\nimport {applyMiddleware, createStore} from 'redux'\nimport {initialState, reducer} from './reducers'\nimport {persistReducer, persistStore} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from \"redux-persist/es/stateReconciler/autoMergeLevel2\";\n\nconst persistConfig = {\n    key: 'root',\n    storage: storage,\n    whitelist: ['settings', 'quick_list'],\n    stateReconciler: autoMergeLevel2\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nexport const store = process.env.NODE_ENV === 'development'\n        ? createStore(persistedReducer, initialState, applyMiddleware(logger))\n        : createStore(persistedReducer, initialState);\n\nexport const persistor = persistStore(store);\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {persistor, store} from \"./store\";\nimport {PersistGate} from \"redux-persist/integration/react\";\nimport logo from './resources/logo.svg';\nimport './resources/css/index.css';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate persistor={persistor} loading={<img src={logo} className=\"App-logo\" alt=\"logo\"/>}>\n            <App/>\n        </PersistGate>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}